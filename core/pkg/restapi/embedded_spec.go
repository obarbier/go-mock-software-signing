// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/github.com.obarbier.custom-app.core.v1+json"
  ],
  "produces": [
    "application/github.com.obarbier.custom-app.core.v1+json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "key/user management and authorization server",
    "title": "core",
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/user": {
      "put": {
        "tags": [
          "update_user"
        ],
        "summary": "update User",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request body",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "A user with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "create_user"
        ],
        "summary": "create a user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "request body missing.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/all": {
      "get": {
        "description": "allow to query all users in the system",
        "produces": [
          "application/github.com.obarbier.custom-app.core.v1+json"
        ],
        "tags": [
          "get_all"
        ],
        "summary": "Returns a list of users.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ArrayOfUser"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "get_user_by_id"
        ],
        "summary": "Returns a user by ID.",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "description": "id of the user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "The specified user ID is invalid (e.g. not a number).",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "A user with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_user_by_id"
        ],
        "summary": "update User by id",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "description": "id of the user",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request body",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "A user with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "delete_user_by_id"
        ],
        "summary": "delete user by id",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "description": "id of the user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The specified user ID is invalid (e.g. not a number).",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "A user with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ArrayOfUser": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserResponse"
      }
    },
    "CreateUserRequest": {
      "type": "object",
      "required": [
        "user_name"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "Key": {
      "type": "object",
      "required": [
        "key_type"
      ],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "type": "integer"
        },
        "key_type": {
          "type": "string",
          "$ref": "#/definitions/KeyType"
        }
      }
    },
    "KeyType": {
      "type": "string",
      "enum": [
        "RSA_2048",
        "RSA_4096"
      ]
    },
    "User": {
      "type": "object",
      "required": [
        "user_name"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "password": {
          "type": "string"
        },
        "policy": {
          "type": "object",
          "$ref": "#/definitions/policy"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "required": [
        "user_name"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "capability": {
      "type": "string",
      "enum": [
        "create",
        "read",
        "update",
        "delete"
      ]
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "policy": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/capability"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/github.com.obarbier.custom-app.core.v1+json"
  ],
  "produces": [
    "application/github.com.obarbier.custom-app.core.v1+json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "key/user management and authorization server",
    "title": "core",
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/user": {
      "put": {
        "tags": [
          "update_user"
        ],
        "summary": "update User",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request body",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "A user with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "create_user"
        ],
        "summary": "create a user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "request body missing.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/all": {
      "get": {
        "description": "allow to query all users in the system",
        "produces": [
          "application/github.com.obarbier.custom-app.core.v1+json"
        ],
        "tags": [
          "get_all"
        ],
        "summary": "Returns a list of users.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ArrayOfUser"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "get_user_by_id"
        ],
        "summary": "Returns a user by ID.",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "description": "id of the user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "The specified user ID is invalid (e.g. not a number).",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "A user with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_user_by_id"
        ],
        "summary": "update User by id",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "description": "id of the user",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request body",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "A user with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "delete_user_by_id"
        ],
        "summary": "delete user by id",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "description": "id of the user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The specified user ID is invalid (e.g. not a number).",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "A user with the specified ID was not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ArrayOfUser": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserResponse"
      }
    },
    "CreateUserRequest": {
      "type": "object",
      "required": [
        "user_name"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "Key": {
      "type": "object",
      "required": [
        "key_type"
      ],
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "type": "integer"
        },
        "key_type": {
          "type": "string",
          "$ref": "#/definitions/KeyType"
        }
      }
    },
    "KeyType": {
      "type": "string",
      "enum": [
        "RSA_2048",
        "RSA_4096"
      ]
    },
    "PolicyAnon": {
      "type": "object",
      "properties": {
        "capabilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/capability"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "user_name"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "password": {
          "type": "string"
        },
        "policy": {
          "type": "object",
          "$ref": "#/definitions/policy"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "required": [
        "user_name"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "capability": {
      "type": "string",
      "enum": [
        "create",
        "read",
        "update",
        "delete"
      ]
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "policy": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/PolicyAnon"
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}`))
}
