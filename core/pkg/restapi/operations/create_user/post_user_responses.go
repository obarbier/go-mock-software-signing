// Code generated by go-swagger; DO NOT EDIT.

package create_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/obarbier/custom-app/core/pkg/models"
)

// PostUserCreatedCode is the HTTP code returned for type PostUserCreated
const PostUserCreatedCode int = 201

/*
PostUserCreated CREATED

swagger:response postUserCreated
*/
type PostUserCreated struct {

	/*
	  In: Body
	*/
	Payload *models.UserResponse `json:"body,omitempty"`
}

// NewPostUserCreated creates PostUserCreated with default headers values
func NewPostUserCreated() *PostUserCreated {

	return &PostUserCreated{}
}

// WithPayload adds the payload to the post user created response
func (o *PostUserCreated) WithPayload(payload *models.UserResponse) *PostUserCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user created response
func (o *PostUserCreated) SetPayload(payload *models.UserResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserBadRequestCode is the HTTP code returned for type PostUserBadRequest
const PostUserBadRequestCode int = 400

/*
PostUserBadRequest request body missing.

swagger:response postUserBadRequest
*/
type PostUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostUserBadRequest creates PostUserBadRequest with default headers values
func NewPostUserBadRequest() *PostUserBadRequest {

	return &PostUserBadRequest{}
}

// WithPayload adds the payload to the post user bad request response
func (o *PostUserBadRequest) WithPayload(payload *models.Error) *PostUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user bad request response
func (o *PostUserBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserUnauthorizedCode is the HTTP code returned for type PostUserUnauthorized
const PostUserUnauthorizedCode int = 401

/*
PostUserUnauthorized unauthorized

swagger:response postUserUnauthorized
*/
type PostUserUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostUserUnauthorized creates PostUserUnauthorized with default headers values
func NewPostUserUnauthorized() *PostUserUnauthorized {

	return &PostUserUnauthorized{}
}

// WithPayload adds the payload to the post user unauthorized response
func (o *PostUserUnauthorized) WithPayload(payload *models.Error) *PostUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user unauthorized response
func (o *PostUserUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserInternalServerErrorCode is the HTTP code returned for type PostUserInternalServerError
const PostUserInternalServerErrorCode int = 500

/*
PostUserInternalServerError server error

swagger:response postUserInternalServerError
*/
type PostUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostUserInternalServerError creates PostUserInternalServerError with default headers values
func NewPostUserInternalServerError() *PostUserInternalServerError {

	return &PostUserInternalServerError{}
}

// WithPayload adds the payload to the post user internal server error response
func (o *PostUserInternalServerError) WithPayload(payload *models.Error) *PostUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user internal server error response
func (o *PostUserInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PostUserDefault error

swagger:response postUserDefault
*/
type PostUserDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostUserDefault creates PostUserDefault with default headers values
func NewPostUserDefault(code int) *PostUserDefault {
	if code <= 0 {
		code = 500
	}

	return &PostUserDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post user default response
func (o *PostUserDefault) WithStatusCode(code int) *PostUserDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post user default response
func (o *PostUserDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post user default response
func (o *PostUserDefault) WithPayload(payload *models.Error) *PostUserDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user default response
func (o *PostUserDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
