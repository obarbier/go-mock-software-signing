// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Capability capability
//
// swagger:model capability
type Capability string

func NewCapability(value Capability) *Capability {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Capability.
func (m Capability) Pointer() *Capability {
	return &m
}

const (

	// CapabilityCreate captures enum value "create"
	CapabilityCreate Capability = "create"

	// CapabilityRead captures enum value "read"
	CapabilityRead Capability = "read"

	// CapabilityUpdate captures enum value "update"
	CapabilityUpdate Capability = "update"

	// CapabilityDelete captures enum value "delete"
	CapabilityDelete Capability = "delete"
)

// for schema
var capabilityEnum []interface{}

func init() {
	var res []Capability
	if err := json.Unmarshal([]byte(`["create","read","update","delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		capabilityEnum = append(capabilityEnum, v)
	}
}

func (m Capability) validateCapabilityEnum(path, location string, value Capability) error {
	if err := validate.EnumCase(path, location, value, capabilityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this capability
func (m Capability) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCapabilityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this capability based on context it is used
func (m Capability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
