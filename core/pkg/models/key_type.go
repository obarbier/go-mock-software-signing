// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// KeyType key type
//
// swagger:model KeyType
type KeyType string

func NewKeyType(value KeyType) *KeyType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated KeyType.
func (m KeyType) Pointer() *KeyType {
	return &m
}

const (

	// KeyTypeRSA2048 captures enum value "RSA_2048"
	KeyTypeRSA2048 KeyType = "RSA_2048"

	// KeyTypeRSA4096 captures enum value "RSA_4096"
	KeyTypeRSA4096 KeyType = "RSA_4096"
)

// for schema
var keyTypeEnum []interface{}

func init() {
	var res []KeyType
	if err := json.Unmarshal([]byte(`["RSA_2048","RSA_4096"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keyTypeEnum = append(keyTypeEnum, v)
	}
}

func (m KeyType) validateKeyTypeEnum(path, location string, value KeyType) error {
	if err := validate.EnumCase(path, location, value, keyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this key type
func (m KeyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateKeyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this key type based on context it is used
func (m KeyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
