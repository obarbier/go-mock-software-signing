// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Key key
//
// swagger:model Key
type Key struct {

	// data
	Data map[string]interface{} `json:"data,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// key type
	// Required: true
	KeyType *KeyType `json:"key_type"`
}

// Validate validates this key
func (m *Key) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Key) validateKeyType(formats strfmt.Registry) error {

	if err := validate.Required("key_type", "body", m.KeyType); err != nil {
		return err
	}

	if err := validate.Required("key_type", "body", m.KeyType); err != nil {
		return err
	}

	if m.KeyType != nil {
		if err := m.KeyType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("key_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this key based on the context it is used
func (m *Key) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKeyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Key) contextValidateKeyType(ctx context.Context, formats strfmt.Registry) error {

	if m.KeyType != nil {
		if err := m.KeyType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("key_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Key) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Key) UnmarshalBinary(b []byte) error {
	var res Key
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
